name: CI
on:
  push:
    branches:
      - 'main'
jobs:
  draft_release:
    if: ${{ !contains(github.event.head_commit.message, 'update to latest binary release') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create draft
        run: gh release create "release-$(git rev-parse --short HEAD)" --draft --title "Automatic release of main @ $(git rev-parse --short HEAD)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create draft
        run: gh release edit "release-$(git rev-parse --short HEAD)" --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  all:
    needs: draft_release
    strategy:
      matrix:
        target: [
          'x86_64-linux-gnu',
          'x86_64-linux-musl',
          'aarch64-linux-gnu',
          'aarch64-linux-musl',
          'x86_64-windows-gnu',
          'aarch64-windows-gnu',
          'x86_64-macos',
          'aarch64-macos',
        ]
        optimize: [Debug, ReleaseFast]
        include:
          - target: 'x86_64-linux-gnu'
            cpu: '-Dcpu=x86_64_v2'
          - target: 'x86_64-linux-musl'
            cpu: '-Dcpu=x86_64_v2'
          - target: 'x86_64-windows-gnu'
            cpu: '-Dcpu=x86_64_v2'
          - target: 'x86_64-macos'
            cpu: '-Dcpu=x86_64_v2'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Zig
        run: |
          sudo apt install xz-utils
          sudo sh -c 'wget -c https://pkg.machengine.org/zig/zig-linux-x86_64-0.12.0-dev.1751+7fbbeae61.tar.xz -O - | tar -xJ --strip-components=1 -C /usr/local/bin'
      - name: build
        run: zig build -Dfrom-source -Dtarget=${{ matrix.target }} -Doptimize=${{ matrix.optimize }} ${{ matrix.cpu }}
      - name: upload
        run: ./dev/upload-release.sh
        env:
          RELEASE_NAME: ${{ matrix.target }}_${{ matrix.optimize }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  msvc:
    needs: draft_release
    strategy:
      matrix:
        target: [
          'x86_64-windows-msvc',
          'x86_64-windows-msvc',
          'aarch64-windows-msvc',
          'aarch64-windows-msvc',
        ]
        optimize: [Debug, ReleaseFast]
        node: [14, 16]
        include:
          - os: windows-latest
            node: 16
            npm: 6
    runs-on: windows-latest
    # We want to run on external PRs, but not on our own internal PRs as they'll be run by the push
    # to the branch.
    if: github.event.workflow_run.conclusion == 'success' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository)
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Zig
        run: |
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest -Uri "https://pkg.machengine.org/zig/zig-windows-x86_64-0.12.0-dev.1751+7fbbeae61.zip" -OutFile "C:\zig.zip"
          cd C:\
          7z x zig.zip
          Add-Content $env:GITHUB_PATH "C:\zig-windows-x86_64-0.12.0-dev.1751+7fbbeae61\"
      - name: build
        run: zig build -Dfrom-source -Dtarget=${{ matrix.target }} -Doptimize=${{ matrix.optimize }} ${{ matrix.cpu }}
      - name: upload
        run: ./dev/upload-release.sh
        shell: bash
        env:
          WINDOWS: true
          RELEASE_NAME: ${{ matrix.target }}_${{ matrix.optimize }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish:
    needs: [all, msvc]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Publish release
        run: gh release edit "release-$(git rev-parse --short HEAD)" --draft=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Record latest release version
        id: recorded_release_version
        # Note: we find the latest non-'update to latest binary release' commit here, which is not
        # necessarily HEAD because another build could have succeeded before us and HEAD may now refer
        # to 'update to latest binary release' instead of the commit we were building.
        # By doing this, we ensure any update we push would refer to the absolute latest binary
        # release even if *this* CI run is older.
        run: echo "recorded_release_version=$(git log --oneline | grep -v 'update to latest binary release' | head -n1 | cut -d " " -f1)" >> $GITHUB_ENV
      - name: Checkout hexops/mach-dxcompiler repo
        uses: actions/checkout@v3
        with:
          repository: hexops/mach-dxcompiler
          token: ${{ secrets.HEXOPS_MACH_DXCOMPILER_PUSH }}
      - name: 'update hard-coded binary release version'
        env:
          RELEASE_COMMIT: ${{env.recorded_release_version}}
        run: |
          sed -i "/binary_version: \[\]const u8 =/c\            binary_version: []const u8 = \"release-$RELEASE_COMMIT\"," ./build.zig
          git config user.name 'Release automation'
          git config user.email 'wrench@hexops.com'
          git add .
          git commit -m 'update to latest binary release'
          git push -u origin HEAD
